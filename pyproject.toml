# SPDX-FileCopyrightText: 2023 Mark Liffiton <liffiton@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

[project]
name = 'Gen-Ed'
description = "A framework for building web applications using generative AI (LLMs) for education."
version = '0.1.0'
authors = [
    { name='Mark Liffiton', email='liffiton@gmail.com' }
]
readme = 'README.md'
license = 'AGPL-3.0-only'
license-files = ['LICENSES/*']
requires-python = '>=3.11'

classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Flask",
    "Intended Audience :: Education",
    "Programming Language :: Python :: 3",
    "Topic :: Education",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "Authlib~=1.6.1",
    "Flask~=3.1.0",
    "markdown-it-py~=3.0.0",
    "openai~=1.0, >=1.79",
    "pylti@git+https://github.com/liffiton/pylti",
    "pyrage~=1.2.0",
    "python-dotenv~=1.1.0",
    "python-frontmatter~=1.1.0",
    "tzdata; platform_system == 'Windows'",  # Timezone data for Windows
]

[project.optional-dependencies]
test = [
    "oauthlib~=3.3.0",
    "pytest~=8.0",
    "pytest-cov~=6.2.0",
    "pytest-xdist~=3.8.0",
    "mypy",
    "types-oauthlib~=3.3.0",
    "types-requests",
    "pyrage-stubs~=1.2.0",
]

[project.urls]
Repository = 'https://github.com/liffiton/Gen-Ed/'


[tool.pytest.ini_options]
log_level = 'DEBUG'
testpaths = 'tests'
addopts = [
    "--import-mode=importlib",
    "-n=auto",
]
markers = [
    "use_real_openai: marks any test that sends requests to the real OpenAI endpoint",
]


[tool.ruff]
include = ["pyproject.toml", "src/**/*.py", "tests/**/*.py"]
output-format = "grouped"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E501",   # line too long
    "COM812", # missing trailing comma
    "ERA001", # commented-out code
    "RET504", # unnecessary assignment before return
    "RET505", # unnecessary else after return
    "S101",   # assert statements
    "S311",   # pseudo-random number generators
    "T20",    # Flake8-print (print statements)
    "TRY400", # logger.error() inside except block
    "G004",   # f-string in logging statement
    "EM",     # Exceptions with string literals
    "Q",      # string quoting
    "D",      # docstrings
    "ANN",    # type annotation
    "TD",     # TODOs
    "PERF203",# try-except in a loop
    "C408",   # dict() vs dict literal
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [  # Ignore warnings in the tests directory
    "E712",     # equality comparisons to False (make assertions clearer)
    "PLR0913",  # too many arguments (fixtures push us in that direction)
    "PLR2004",  # magic numbers
    "S106",     # hardcoded passwords
    "S107",     # hardcoded passwords
    "S608",     # possible sql injection
]

[tool.djlint]
profile = "jinja"
files = ["src/"]
ignore = "T001,H021,H023,H029"

[tool.mypy]
files = [ "src/", "tests/" ]
strict = "True"
pretty = "True"
